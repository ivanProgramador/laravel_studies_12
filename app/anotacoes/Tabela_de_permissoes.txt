Porque salvar na abase de dados

As policies retornan true ou false essa e a função delas porém é importante ver
que ter as permissões slavas na base de dados possibilita uma detalhamento maior
em relação a perfis de usuarios.

A tabela de permissões criada possui uma relação com os usuarios atraves do id,
a relação estabelecida foid e um para muitos porque um usuario, pode fazer muitas 
coisas dentro de um sistema dependendo da hierarquia.

então foi criado um seed de permissões com a seguinte regra 

1 - administrador 
    pode deletar,criar,atualizar e excluir o post dele e dos demais 

2 - usuario comum 
    pode criar posts 

3 - usuario visitante 
    pode criar posts

Relação Usuario, Permissão e Posts

  Antes de fazer qualquer coisa eu tenho que testar se essas relações estão funcionando,
  porque a regra de negocio desse projeto depende dessa relação.esse codigo traz em formato 
  de array o usuario e suas permissões 

  
         $user = User::with('permissions')->find($id);
         Auth::login($user);

         echo'<pre>';
          $user = Auth::user()->toArray();
          print_r($user);
          die();

Com isso ao inves de ler o cargo dele eu faço uma consulta na base de dados para verificar as permissões que foram atribuidas,
no perfil dele, na abase dedados eu posso dizer o nome especifico para cada permissão e associar ela a um grupo por exemplo no 
codigo abaixo a função update busca por uma permissão com o nome 'update_post' dentro da tebla de permissões que esteja associada
a esse tipo de usuario, se encontrar ela retorna true, mas essa permissão poderia tambem ser outra mais especifica por exemplo:

1 - ver_relatorio
2 - ver_lista_usuario 
3 - auditar_acessos 
4 - apagar_cadastro 

por isso manter essas permissões em uma tabela me dá a liberdade de colocar o nome que eu quiser 

  public function update(User $user, Post $Post): bool
    {
        return $user->permissions->contains('permission','update_post');
    }

Mensagens personalizadas 
 As policies pemitem que eu envie mensagens personalizadas em caso de negação/permissão de acesso
 no codigo abaixo depois de negar a apermissão eu mandoi tento o status 403 quando uma mensagem  

 if($user->permissions->contains('permission','create_post')){
           return Response::allow();
 }else{
           return Response::denyWithStatus(403,'Você não tem essa permissão');
 }

Tratando o retorno dentro do metodo no controller 
  Aqui eu uso metodos das gates qque seria o spect que  server parar detalhar
  oque esta sendo retornado com isso eu conseigo acessar a amensagem e o status 
  delvolvidos no retorno para avisar ao ussurio de uma forma mais amigavel eu 
  uso a função abort ela recebe 2 parameteros  
  
  1 - status retornado
  2 - a mensagem   
   
com isso ela mostra uma view padrão do laravel pra negação ou aviso 


   $response = Gate::inspect('create',Post::class);
        if($response->allowed()){
           echo'Usuario pode criar um post';
        }else{

          //fazendo dessa forma ele mostra uma pagina com um visual mais amigavel 
           
           if($response->status()===403){
               abort(403,$response->message());
           }
        }


SUPER USUARIOS 
  Para criar super usuarios eu tenho que criar a policy before eu fiz uma logica basica para 
  definir uma usuario como super, basicamente ela teste se o nome do usuario é 'SUPER'se for 
  todas as outras policieis serão ignoradas e ele terá acesso irrestrito a qualquer recurso 
  do sistema, para testar eu estou usando o nome mas qualquer logica mais ou menos complexa 
  pode ser usada tambem.  
    
    public function before(User $user){
         if($user->name ==='SUPER'){
             return true;
         }
    } 







           